<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <help_text>// To modify this UML description file, download the open-source UMLet software.
// Uncomment the following line to change the fontsize and font:
fontsize=16
fontfamily=SansSerif //possible: SansSerif,Serif,Monospaced

++
//////////////////////////////////////////////////////////////////////////////////////////////
// Welcome to UMLet!
//
// Double-click on elements to add them to the diagram, or to copy them
// Edit elements by modifying the text in this panel
// Hold Ctrl to select multiple elements
// Use Ctrl+mouse to select via lasso
//
// Use +/- or Ctrl+mouse wheel to zoom
// Drag a whole relation at its central square icon
//
// Press Ctrl+C to copy the whole diagram to the system clipboard (then just paste it to, eg, Word)
// Edit the files in the "palettes" directory to create your own element palettes
//
// Select "Custom Elements &gt; New..." to create new element types
//////////////////////////////////////////////////////////////////////////////////////////////


// This text will be stored with each diagram;  use it for notes.</help_text>
  <zoom_level>10</zoom_level>
  <element>
    <id>UMLFrame</id>
    <coordinates>
      <x>1030</x>
      <y>190</y>
      <w>1370</w>
      <h>2060</h>
    </coordinates>
    <panel_attributes>ai
--
bg=light_gray</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLFrame</id>
    <coordinates>
      <x>2450</x>
      <y>190</y>
      <w>580</w>
      <h>330</h>
    </coordinates>
    <panel_attributes>memory
--
bg=light_gray</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLFrame</id>
    <coordinates>
      <x>3080</x>
      <y>190</y>
      <w>580</w>
      <h>330</h>
    </coordinates>
    <panel_attributes>feedback
--
bg=light_gray</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLFrame</id>
    <coordinates>
      <x>2450</x>
      <y>570</y>
      <w>580</w>
      <h>330</h>
    </coordinates>
    <panel_attributes>perception
--
bg=light_gray</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLFrame</id>
    <coordinates>
      <x>3080</x>
      <y>570</y>
      <w>580</w>
      <h>330</h>
    </coordinates>
    <panel_attributes>movement
--
bg=light_gray</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLFrame</id>
    <coordinates>
      <x>2450</x>
      <y>960</y>
      <w>580</w>
      <h>330</h>
    </coordinates>
    <panel_attributes>navigation
--
bg=light_gray</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>1070</x>
      <y>250</y>
      <w>720</w>
      <h>1960</h>
    </coordinates>
    <panel_attributes>scheduler
--
*Description*
This is where the user gives the actions the robot has to 
execute. They are defined with XML files located in
/robot_ai/Defintions./

The AI then sends orders the the other packages 
accordingly, and adapts to eventual errors thanks to 
the strategy set by the user.






-
*Classes*


















































































--
*Topics*
Subscriptions :
/  - /game_timer/

Publisher to :
/  - none/
--
*Services*
TODO

bg=white
layer=3
valign=top
halign=left
transparency=50</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>1820</x>
      <y>1150</y>
      <w>140</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>execution?
--
TODO see if 
needed
halign=left
valign=top
bg=white
layer=3</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>1820</x>
      <y>250</y>
      <w>540</w>
      <h>870</h>
    </coordinates>
    <panel_attributes>timer
--
*Description*
This (small) package smiply keeps track of the time
spent since the game started.

It is triggered by an AI Order.
The node publishes the current time, time left for the game 
and whether the game is finished or not to the topic
/ /game_timer (msg : robot_ai_timer/msg/ai_timer.msg)/







-
*Classes*


























--
*Topics*
Publisher to :
/  - /game_timer/

bg=white
layer=3
valign=top
halign=left
transparency=50</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>2650</x>
      <y>240</y>
      <w>150</w>
      <h>150</h>
    </coordinates>
    <panel_attributes>body
--
Keeps track of 
the content of a 
robot.

valign=top
halign=left
bg=white
layer=3</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>2480</x>
      <y>240</y>
      <w>150</w>
      <h>150</h>
    </coordinates>
    <panel_attributes>map
--
Keeps track of
The map with
dynamic objects,
trajectories,
tracking and
cynamic entities

valign=top
halign=left
bg=white
layer=3</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>3460</x>
      <y>250</y>
      <w>150</w>
      <h>150</h>
    </coordinates>
    <panel_attributes>logger
--
Package that
listens to all 
important nodes
to log.

valign=top
halign=left
bg=white
layer=3</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>3290</x>
      <y>250</y>
      <w>150</w>
      <h>150</h>
    </coordinates>
    <panel_attributes>display
--
Onboard display
on the robot for
debugging
purposes.

valign=top
halign=left
bg=white
layer=3</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>3120</x>
      <y>250</y>
      <w>150</w>
      <h>150</h>
    </coordinates>
    <panel_attributes>server
--
Runs a GUI web
server 
accessible for 
debugging and 
visualization.
valign=top
halign=left
bg=white
layer=3</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>2850</x>
      <y>620</y>
      <w>150</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>lidar
--
Connects to
a lidar and 
publishes the 
points to a topic.
valign=top
halign=left
bg=white
layer=3</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>2480</x>
      <y>620</y>
      <w>180</w>
      <h>240</h>
    </coordinates>
    <panel_attributes>recognizer
--
Holds recognition
algorithms.

When asked to
recognize a 
map object, 
decides which
perception modules
to listen to and 
applies the right
algorithm.

halign=left
valign=top
bg=white
layer=3</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>3120</x>
      <y>620</y>
      <w>150</w>
      <h>240</h>
    </coordinates>
    <panel_attributes>wheels
--
Communicates
with the 
pathfinder.

Controls the
robot's wheels.

halign=left
valign=top
bg=white
layer=3</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>3290</x>
      <y>620</y>
      <w>150</w>
      <h>240</h>
    </coordinates>
    <panel_attributes>actuators
--
Connects to
an arduino 
dedicated to 
actuators and
executes the
service 
commands.
halign=left
valign=top
bg=white
layer=3</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>3460</x>
      <y>620</y>
      <w>150</w>
      <h>240</h>
    </coordinates>
    <panel_attributes>robotarm
--
Controls a 
robot arm.
halign=left
valign=top
bg=white
layer=3</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>2490</x>
      <y>1010</y>
      <w>150</w>
      <h>220</h>
    </coordinates>
    <panel_attributes>localizer
--
Listens to 
all perception
modules and 
figures out
where the robot 
is.
halign=left
valign=top
bg=white
layer=3</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>2660</x>
      <y>1010</y>
      <w>150</w>
      <h>220</h>
    </coordinates>
    <panel_attributes>pathfinder
--
Gets a map grid
from the map 
package and 
returns a path 
(if possible)
from point A 
to B.
halign=left
valign=top
bg=white
layer=3</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>2830</x>
      <y>1010</y>
      <w>150</w>
      <h>220</h>
    </coordinates>
    <panel_attributes>armfinder
--
Gives the path 
with speeds the
arm has to 
follow (avoids 
obstacles).

halign=left
valign=top
bg=white
layer=3</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>2850</x>
      <y>750</y>
      <w>150</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>camera
--
Connects to
a camera and 
publishes the 
image to a topic.
valign=top
halign=left
bg=white
layer=3</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>2680</x>
      <y>620</y>
      <w>150</w>
      <h>240</h>
    </coordinates>
    <panel_attributes>skin
--
Connects to
an arduino 
dedicated to 
sensors and
publishes the 
statuses to a 
topic.
valign=top
halign=left
bg=white
layer=3</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>720</x>
      <y>190</y>
      <w>280</w>
      <h>640</h>
    </coordinates>
    <panel_attributes>*Legend*
-..</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLFrame</id>
    <coordinates>
      <x>740</x>
      <y>240</y>
      <w>240</w>
      <h>540</h>
    </coordinates>
    <panel_attributes>ros namespace
--
bg=light_gray</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>750</x>
      <y>280</y>
      <w>220</w>
      <h>460</h>
    </coordinates>
    <panel_attributes>ros package
--
*Description*



--
*Classes*
















--
*Topics*
--
*Services*


bg=white
halign=left
valign=top
layer=3</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1110</x>
      <y>580</y>
      <w>200</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>type=actclass
*ai_node.py*
--
*Methods*
    - runAI()
layer=10
bg=green
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLHierarchy</id>
    <coordinates>
      <x>1560</x>
      <y>300</y>
      <w>210</w>
      <h>200</h>
    </coordinates>
    <panel_attributes>type=Package
robot_ai
	msg
	src
		AI
		Definitions
	srv
layer=5
fg=white
bg=black
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1340</x>
      <y>570</y>
      <w>410</w>
      <h>200</h>
    </coordinates>
    <panel_attributes>*ai_services.py*
--
*Methods*
    - constructor(department, package)
    - (ServiceResponse)  on_generic_command(request)
    - service_delay
--
*Attributes*
    - string[] AvailableStrategies TODO
    - AICommunication communication
    - Strategy Strategy
    - GameTimer timer

layer=5
bg=yellow
transparency=80</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>760</x>
      <y>410</y>
      <w>200</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>type=actclass
*Node_class.py*
/Launched by launch file/
layer=5
bg=green</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>760</x>
      <y>470</y>
      <w>200</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>*ROS_linked_class.py*
--
/Methods/
-..


layer=5
bg=yellow
transparency=80</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1300</x>
      <y>600</y>
      <w>60</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>lt=)-
layer=5</panel_attributes>
    <additional_attributes>20.0;20.0;40.0;20.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1100</x>
      <y>820</y>
      <w>410</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>*RobotAI*
--
*Methods*
    - constructor(strategyname, communicationclass)
--
*Attributes*
    - string[] AvailableStrategies TODO
    - AICommunication communication
    - Strategy Strategy
    - GameTimer timer


layer=5
transparency=5
group=2</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>760</x>
      <y>550</y>
      <w>200</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>*internal_class.py*
--



layer=5
bg=white
transparency=5</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1110</x>
      <y>1070</y>
      <w>300</w>
      <h>150</h>
    </coordinates>
    <panel_attributes>*Strategy*
--
*Methods*
    - void constructor(xml, actions, orders)
    - bool canContinue()
    - Task getNext()
--
*Attributes*
    - Task[] TASKS

layer=6
transparency=0
group=1</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1450</x>
      <y>1070</y>
      <w>300</w>
      <h>290</h>
    </coordinates>
    <panel_attributes>*Task*
--
*Methods*
    - void constructor(xml, actions, orders)
    - void loadConditions(xml)
    - bool canContinue()
    - Task getNext()
    - TaskStatus getStatus()
    - TaskStatus getStatusEmoji()
    - void setStatus()
    - void prettyprint()
    - string __repr__()
--
*Attributes*
    - string Name
    - int Reward
    - TaskStatus status
layer=6
transparency=0
group=1</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1090</x>
      <y>780</y>
      <w>430</w>
      <h>230</h>
    </coordinates>
    <panel_attributes>lt=.
*ai.py*
-..
layer=4
bg=gray
transparency=60
group=2</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1090</x>
      <y>1030</y>
      <w>680</w>
      <h>940</h>
    </coordinates>
    <panel_attributes>lt=.
*ai_classes.py*
-..
layer=4
bg=gray
transparency=60
group=1</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1110</x>
      <y>1900</y>
      <w>120</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>/TaskStatus/
enum
layer=5
bg=white
group=1</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1500</x>
      <y>1900</y>
      <w>120</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>/ExecutionMode/
enum
layer=5
bg=white
group=1</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1240</x>
      <y>1900</y>
      <w>120</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>/ExecutionOrder/
enum
layer=5
bg=white
group=1</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1110</x>
      <y>1240</y>
      <w>210</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>*GameProperties*
--
*Attributes*
    - int GAME_SURATION
    - int REWARD_POINTS

layer=6
transparency=0
group=1</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1450</x>
      <y>1380</y>
      <w>300</w>
      <h>260</h>
    </coordinates>
    <panel_attributes>*ActionList (Task)*
--
*Methods*
    - void constructor(xml, actions, orders)
    - int getDuration()
    - Task getNext()
    - void refreshStatus()
    - void execute()
--
*Attributes*
    - ExecutionMode executionMode
    - ExecutionOrder executionOrder
    - int Duration
    - Task[] TASKS
layer=6
transparency=0
group=1</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1110</x>
      <y>1380</y>
      <w>300</w>
      <h>220</h>
    </coordinates>
    <panel_attributes>*Action (Task)*
--
*Methods*
    - void constructor(xml, actions, orders)
    - int getDuration()
    - Task getNext()
    - void refreshStatus()
    - void execute()
--
*Attributes*
    - string Ref
    - int Duration
    - Task[] TASKS
layer=6
transparency=0
group=1</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1110</x>
      <y>1610</y>
      <w>300</w>
      <h>230</h>
    </coordinates>
    <panel_attributes>*Order (Task)*
--
*Methods*
    - void constructor(xml)
    - int getDuration()
    - void execute()
--
*Attributes*
    - string Ref
    - int Duration
    - Task[] TASKS
    - Message Message
    - int TimeTaken
layer=6
transparency=0
group=1</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1450</x>
      <y>1660</y>
      <w>300</w>
      <h>220</h>
    </coordinates>
    <panel_attributes>*Message*
--
*Methods*
    - void constructor(xml)
    - void check_valid()
    - int, int send(communication_class)
--
*Attributes*
    - string Department
    - string Destination
    - string Command
    - TODO params
layer=6
transparency=0
group=1</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1630</x>
      <y>1900</y>
      <w>120</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>/Colors/
enum
layer=5
bg=white
group=1</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1370</x>
      <y>1900</y>
      <w>120</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>*Console*
Helper
layer=5
bg=white
group=1</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1540</x>
      <y>780</y>
      <w>230</w>
      <h>190</h>
    </coordinates>
    <panel_attributes>lt=.
*timer.py*
-..
layer=4
bg=gray
transparency=60
group=3</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1550</x>
      <y>820</y>
      <w>210</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>*GameTimer*
--
*Methods*
    - void constructor()
    - void on_new_time()
/Subscriber to /game_timer/


layer=5
transparency=5
bg=yellow
transparency=50
group=3</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1170</x>
      <y>660</y>
      <w>50</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>lt=)-
layer=5</panel_attributes>
    <additional_attributes>20.0;20.0;20.0;160.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1960</x>
      <y>590</y>
      <w>250</w>
      <h>430</h>
    </coordinates>
    <panel_attributes>type=actclass
*ai_timer_node.py*
--
*Methods*
    - on_srv_request(req)
    - run()
    - start()
    - elapsed_time()
    - time_left()
    - is_finished()
--
*Attributes*
    - Node NODE
    - Service SERV
    - Publisher PUBL
    - int Duration
    - bool started
--
*ROS Communication*


layer=5
bg=green

group=4</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1980</x>
      <y>890</y>
      <w>200</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>*Publisher*
--
/ Name : /game_timer/



layer=6
transparency=5
bg=orange
group=4</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1980</x>
      <y>950</y>
      <w>200</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>*Service Server*
--
/ Name : /ai/timer/



layer=6
transparency=5
bg=orange
group=4</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLHierarchy</id>
    <coordinates>
      <x>2200</x>
      <y>430</y>
      <w>150</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>type=Package
robot_ai
	msg
	src
layer=5
fg=white
bg=black
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLHierarchy</id>
    <coordinates>
      <x>780</x>
      <y>330</y>
      <w>180</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>type=Package
folder structure
layer=5
fg=white
bg=black
</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
